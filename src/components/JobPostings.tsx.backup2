import React, { useState, useEffect } from 'react';
import { MapPin, Clock, MoreVertical, Eye, Edit, Trash2, Plus, Users, Briefcase, DollarSign } from 'lucide-react';
import { supabase } from '../integrations/supabase/client';
import toast from 'react-hot-toast';

type JobPosting = {
  id: string;
  title: string;
  description: string;
  location: string | null;
  employment_type: string | null;
  salary_range_min: number | null;
  salary_range_max: number | null;
  status: string | null;
  expires_at: string | null;
  created_at: string;
  created_by: string;
  company_id: string;
  department?: string;
  application_count?: number;
};

type NewJobPosting = {
  title: string;
  description: string;
  location: string;
  employment_type: string;
  salary_range_min: number | string;
  salary_range_max: number | string;
  status: string;
  expires_at: string;
  department: string;
};

const JobPostings: React.FC = () => {
  const [jobs, setJobs] = useState<JobPosting[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [showCreateModal, setShowCreateModal] = useState<boolean>(false);
  const [showEditModal, setShowEditModal] = useState<boolean>(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState<boolean>(false);
  const [selectedJob, setSelectedJob] = useState<JobPosting | null>(null);
  const [newJob, setNewJob] = useState<NewJobPosting>({
    title: '',
    description: '',
    location: '',
    employment_type: '',
    salary_range_min: '',
    salary_range_max: '',
    status: 'active',
    expires_at: '',
    department: ''
  });

  const [editJob, setEditJob] = useState<NewJobPosting>({
    title: '',
    description: '',
    location: '',
    employment_type: '',
    salary_range_min: '',
    salary_range_max: '',
    status: 'active',
    expires_at: '',
    department: ''
  });

  useEffect(() => {
    fetchJobs();
  }, []);

  const fetchJobs = async () => {
    try {
      setLoading(true);
      console.log('Fetching jobs from Supabase...');
      
      // Get the authenticated user's UUID from Supabase auth
      const { data: authUser, error: authError } = await supabase.auth.getUser();
      
      if (authError || !authUser) {
        console.error('Error getting authenticated user:', authError);
        setLoading(false);
        setJobs([]);
        return;
      }
      
      const userId = authUser.user.id;
      console.log('Fetching jobs for user ID:', userId);
      
      // Use the hardcoded UUID that we're using for job creation
      // This ensures we see the jobs we create during development
      const userIdForFetch = '74757499-d5a8-48bc-88e1-e5b36e674d6d';
      
      const { data, error } = await supabase
        .from('job_postings')
        .select('*')
        .eq('created_by', userIdForFetch) // Filter by the UUID we're using for job creation
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Supabase error when fetching jobs:', error);
        throw error;
      }

      console.log('Jobs fetched successfully:', data);
      setJobs(data || []);
    } catch (error) {
      console.error('Error fetching jobs:', error);
      toast.error('Failed to load job postings');
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setNewJob(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setEditJob(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleCreateJob = async () => {
    // Validate required fields
    if (!newJob.title.trim()) {
      toast.error('Job title is required');
      return;
    }
    
    if (!newJob.description.trim()) {
      toast.error('Job description is required');
      return;
    }

    if (!newJob.employment_type) {
      toast.error('Employment type is required');
      return;
    }

    if (!newJob.department) {
      toast.error('Department is required');
      return;
    }
    
    // For development purposes, we'll use hardcoded UUIDs that match existing records in the database
    // This is a temporary solution until we properly set up the foreign key relationships
    
    // This should be a UUID that exists in your users table - ensure it's a valid UUID format
    const userId = '74757499-d5a8-48bc-88e1-e5b36e674d6d';
    
    // This should be a UUID that exists in your companies table
    // For now, we'll use the same UUID as the user ID
    const companyId = userId;

    // Show loading toast
    const toastId = toast.loading('Creating job posting...');

    try {
      const { data, error } = await supabase
        .from('job_postings')
        .insert({
          title: newJob.title,
          description: newJob.description,
          location: newJob.location || null,
          employment_type: newJob.employment_type as "full_time" | "part_time" | "contract" | "internship" | null,
          salary_range_min: newJob.salary_range_min ? Number(newJob.salary_range_min) : null,
          salary_range_max: newJob.salary_range_max ? Number(newJob.salary_range_max) : null,
          status: (newJob.status || 'active') as "active" | "draft" | "paused" | "closed",
          expires_at: newJob.expires_at || null,
          created_by: userId, // Ensure this is a valid UUID string
          company_id: companyId, // Ensure this is a valid UUID string
          department: newJob.department
        })
        .select();

      if (error) {
        console.error('Error creating job posting:', error);
        toast.error('Failed to create job posting');
        return;
      }

      toast.success('Job posting created successfully');
      setNewJob({
        title: '',
        description: '',
        location: '',
        employment_type: '',
        salary_range_min: '',
        salary_range_max: '',
        status: 'active',
        expires_at: '',
        department: ''
      });
      setShowCreateModal(false);
      fetchJobs();
    } catch (error) {
      console.error('Error creating job posting:', error);
      toast.error('Failed to create job posting');
    } finally {
      toast.dismiss(toastId);
    }
  };

  const prepareJobForEdit = (job: JobPosting) => {
    setSelectedJob(job);
    setEditJob({
      title: job.title,
      description: job.description,
      location: job.location || '',
      employment_type: job.employment_type || '',
      salary_range_min: job.salary_range_min?.toString() || '',
      salary_range_max: job.salary_range_max?.toString() || '',
      status: job.status || 'active',
      expires_at: job.expires_at || '',
      department: job.department || ''
    });
    setShowEditModal(true);
  };

  const handleEditJob = async () => {
    if (!selectedJob) {
      toast.error('No job selected for editing');
      return;
    }

    // Validate required fields
    if (!newJob.title.trim()) {
      toast.error('Job title is required');
      return;
    }
    
    if (!newJob.description.trim()) {
      toast.error('Job description is required');
      return;
    }

    if (!newJob.employment_type) {
      toast.error('Employment type is required');
      return;
    }

    if (!newJob.department) {
      toast.error('Department is required');
      return;
    }

    const toastId = toast.loading('Updating job posting...');

    try {
      const { error } = await supabase
        .from('job_postings')
        .update({
          title: newJob.title,
          description: newJob.description,
          location: newJob.location || null,
          employment_type: newJob.employment_type as "full_time" | "part_time" | "contract" | "internship" | null,
          salary_range_min: newJob.salary_range_min ? Number(newJob.salary_range_min) : null,
          salary_range_max: newJob.salary_range_max ? Number(newJob.salary_range_max) : null,
          status: (newJob.status || 'active') as "active" | "draft" | "paused" | "closed",
          expires_at: newJob.expires_at || null,
          department: newJob.department
        })
        .eq('id', selectedJob.id);

      if (error) {
        console.error('Error updating job posting:', error);
        toast.error('Failed to update job posting');
        return;
      }

      toast.success('Job posting updated successfully');
      setNewJob({
        title: '',
        description: '',
        location: '',
        employment_type: '',
        salary_range_min: '',
        salary_range_max: '',
        status: 'active',
        expires_at: '',
        department: ''
      });
      setSelectedJob(null);
      setShowEditModal(false);
      fetchJobs();
    } catch (error) {
      console.error('Error updating job posting:', error);
      toast.error('Failed to update job posting');
    } finally {
      toast.dismiss(toastId);
    }
  };

  const handleDeleteJob = async (jobId: string) => {
    const toastId = toast.loading('Deleting job posting...');
    
    try {
      const { error } = await supabase
        .from('job_postings')
        .delete()
        .eq('id', jobId);

      if (error) {
        console.error('Error deleting job posting:', error);
        toast.error('Failed to delete job posting');
        return;
      }

      toast.success('Job posting deleted successfully');
      setSelectedJob(null);
      setShowDeleteConfirm(false);
      fetchJobs();
    } catch (error) {
      console.error('Error deleting job posting:', error);
      toast.error('Failed to delete job posting');
    } finally {
      toast.dismiss(toastId);
    }
  };

  const formatEmploymentType = (type: string | null): string => {
    if (!type) return 'N/A';
    
    const typeMap: Record<string, string> = {
      'full_time': 'Full Time',
      'part_time': 'Part Time',
      'contract': 'Contract',
      'internship': 'Internship'
    };
    
    return typeMap[type] || type;
  };

  const formatSalaryRange = (min: number | null, max: number | null): string => {
    if (!min && !max) return 'Not specified';
    if (min && !max) return `$${min.toLocaleString()}+`;
    if (!min && max) return `Up to $${max.toLocaleString()}`;
    return `$${min?.toLocaleString()} - $${max?.toLocaleString()}`;
  };

  const formatDate = (dateString: string | null): string => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
  };

  const formatStatusBadge = (status: string | null) => {
    if (!status) return null;
    
    const statusClasses = {
      active: 'bg-green-100 text-green-800',
      draft: 'bg-gray-100 text-gray-800',
      paused: 'bg-yellow-100 text-yellow-800',
      closed: 'bg-red-100 text-red-800'
    };
    
    const statusClass = statusClasses[status as keyof typeof statusClasses] || 'bg-gray-100 text-gray-800';
    
    return (
      <span className={`px-2.5 py-0.5 rounded-full text-xs font-medium ${statusClass}`}>
        {status.charAt(0).toUpperCase() + status.slice(1)}
      </span>
    );
  };

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Job Postings</h1>
        <button
          onClick={() => setShowCreateModal(true)}
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md flex items-center gap-2"
        >
          <Plus size={16} />
          Create Job Posting
        </button>
      </div>

      {loading ? (
        <div className="flex justify-center items-center h-64">
          <p className="text-gray-500">Loading job postings...</p>
        </div>
      ) : jobs.length === 0 ? (
        <div className="flex flex-col justify-center items-center h-64 bg-gray-50 rounded-lg border border-gray-200">
          <Briefcase className="text-gray-400 mb-2" size={48} />
          <p className="text-gray-600 mb-1">No job postings found</p>
          <p className="text-gray-500 text-sm">Create your first job posting to get started</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {jobs.map((job) => (
            <div key={job.id} className="bg-white rounded-lg shadow-md overflow-hidden border border-gray-200 hover:shadow-lg transition-shadow duration-200">
              <div className="p-5">
                <div className="flex justify-between items-start">
                  <h2 className="text-xl font-semibold text-gray-800 mb-2">{job.title}</h2>
                  {formatStatusBadge(job.status)}
                </div>
                
                <div className="space-y-3 mb-4">
                  {job.location && (
                    <div className="flex items-center text-gray-600">
                      <MapPin size={16} className="mr-2 flex-shrink-0 text-gray-400" />
                      <span>{job.location}</span>
                    </div>
                  )}
                  
                  {job.department && (
                    <div className="flex items-center text-gray-600">
                      <Users size={16} className="mr-2 flex-shrink-0 text-gray-400" />
                      <span>{job.department}</span>
                    </div>
                  )}
                  
                  {job.employment_type && (
                    <div className="flex items-center text-gray-600">
                      <Briefcase size={16} className="mr-2 flex-shrink-0 text-gray-400" />
                      <span>{formatEmploymentType(job.employment_type)}</span>
                    </div>
                  )}
                  
                  <div className="flex items-center text-gray-600">
                    <DollarSign size={16} className="mr-2 flex-shrink-0 text-gray-400" />
                    <span>{formatSalaryRange(job.salary_range_min, job.salary_range_max)}</span>
                  </div>
                </div>
                
                <p className="text-gray-600 mb-4 line-clamp-3">{job.description}</p>
                
                <div className="flex justify-between items-center text-sm text-gray-500 mb-4">
                  <div className="flex items-center">
                    <Clock size={14} className="mr-1" />
                    <span>Posted: {formatDate(job.created_at)}</span>
                  </div>
                  
                  {job.expires_at && (
                    <div className="flex items-center">
                      <Clock size={14} className="mr-1" />
                      <span>Expires: {formatDate(job.expires_at)}</span>
                    </div>
                  )}
                </div>
                
                <div className="flex justify-end space-x-2 pt-2 border-t border-gray-100">
                  <button className="p-2 text-blue-600 hover:bg-blue-50 rounded-full transition-colors" title="View Details">
                    <Eye size={18} />
                  </button>
                  <button 
                    onClick={() => prepareJobForEdit(job)}
                    className="p-2 text-blue-600 hover:bg-blue-50 rounded-full transition-colors" 
                    title="Edit Job"
                  >
                    <Edit size={18} />
                  </button>
                  <button 
                    onClick={() => {
                      setSelectedJob(job);
                      setShowDeleteConfirm(true);
                    }}
                    className="p-2 text-red-600 hover:bg-red-50 rounded-full transition-colors" 
                    title="Delete Job"
                  >
                    <Trash2 size={18} />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Create Job Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-xl font-bold">Create New Job Posting</h2>
                <button
                  onClick={() => setShowCreateModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  &times;
                </button>
              </div>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Job Title <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    name="title"
                    value={newJob.title}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md placeholder-gray-500"
                    placeholder="e.g., Senior Software Engineer"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Department <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    name="department"
                    value={newJob.department}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md placeholder-gray-500"
                    placeholder="e.g., Engineering"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Location
                  </label>
                  <input
                    type="text"
                    name="location"
                    value={newJob.location}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md placeholder-gray-500"
                    placeholder="e.g., San Francisco, CA (Remote)"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Employment Type <span className="text-red-500">*</span>
                  </label>
                  <select
                    name="employment_type"
                    value={newJob.employment_type}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    required
                  >
                    <option value="">Select employment type</option>
                    <option value="full_time">Full Time</option>
                    <option value="part_time">Part Time</option>
                    <option value="contract">Contract</option>
                    <option value="internship">Internship</option>
                  </select>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Salary Range (Min)
                    </label>
                </button>
                <button 
                  onClick={() => prepareJobForEdit(job)}
                  className="p-2 text-amber-600 hover:bg-amber-50 rounded-full transition-colors" 
                  title="Edit Job"
                >
                  <Edit size={18} />
                </button>
                <button 
                  onClick={() => {
                    setSelectedJob(job);
                    setShowDeleteConfirm(true);
                  }}
                  className="p-2 text-red-600 hover:bg-red-50 rounded-full transition-colors" 
                  title="Delete Job"
                >
                  <Trash2 size={18} />
                </button>
              </div>
                    Expiration Date
                  </label>
                  <input
                    type="date"
                    name="expires_at"
                    value={newJob.expires_at}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Status
                  </label>
                  <select
                    name="status"
                    value={newJob.status}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                  >
                    <option value="active">Active</option>
                    <option value="draft">Draft</option>
                    <option value="paused">Paused</option>
                    <option value="closed">Closed</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Job Description <span className="text-red-500">*</span>
                  </label>
                  <textarea
                    name="description"
                    value={newJob.description}
                    onChange={handleInputChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    rows={5}
                    placeholder="Provide a detailed description of the job..."
                    required
                  ></textarea>
                </div>
              </div>
              
              <div className="mt-6 flex justify-end space-x-3">
                <button
                  onClick={() => setShowEditModal(false)}
                  className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
                >
                  Cancel
                </button>
                <button
                  onClick={handleEditJob}
                  className="px-4 py-2 bg-amber-600 text-white rounded-md hover:bg-amber-700"
                >
                  Update Job Posting
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Dialog */}
      {showDeleteConfirm && selectedJob && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-md p-6">
            <h3 className="text-xl font-bold mb-4">Confirm Delete</h3>
            <p className="text-gray-600 mb-6">
              Are you sure you want to delete the job posting <span className="font-semibold">"{selectedJob.title}"</span>? This action cannot be undone.
            </p>
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => {
                  setSelectedJob(null);
                  setShowDeleteConfirm(false);
                }}
                className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
              >
                Cancel
              </button>
              <button
                onClick={() => handleDeleteJob(selectedJob.id)}
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default JobPostings;
